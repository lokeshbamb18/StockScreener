module traffic_control(signal_1_lights, signal_2_lights, signal_3_lights, signal_4_lights, clk, reset, timer1, timer2, timer3, timer4);
	
	output reg[2:0] signal_1_lights, signal_2_lights, signal_3_lights, signal_4_lights;
	output reg[5:0] timer1, timer2, timer3, timer4;
	input clk;
	input reset;
	
	reg [2:0] PS;
	
	parameter [2:0] signal_1 =3'b000;
   parameter [2:0] signal_1_y=3'b001;
   parameter [2:0] signal_2 =3'b010;
   parameter [2:0] signal_2_y=3'b011;
   parameter [2:0] signal_3 =3'b100;
   parameter [2:0] signal_3_y=3'b101;
   parameter [2:0] signal_4 =3'b110;
   parameter [2:0] signal_4_y=3'b111;
	
	reg[3:0] count;
	
	always @(posedge clk, posedge reset) begin
		if(reset)
			begin 
				PS = signal_1;
				count = 0;
				timer1 = 15;
				timer2 = 20;
				timer3 = 40;
				timer4 = 60;
			end
		else
			begin
				case (PS)
				signal_1:
					begin
						if(count == 14)
							begin
								count = 0;
								PS = signal_1_y;
								timer1 = 5;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
						else
							begin
								count = count + 1;
								PS = signal_1;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
					end
				signal_1_y:
					begin
						if(count == 4)
							begin
								count = 0;
								PS = signal_2;
								timer1 = 60;
								timer2 = 15;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
						else
							begin
								count = count + 1;
								PS = signal_1_y;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
					end
				signal_2:
					begin
						if(count == 14)
							begin
								count = 0;
								PS = signal_2_y;
								timer1 = timer1 - 1;
								timer2 = 5;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
						else
							begin
								count = count + 1;
								PS = signal_2;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
					end
				signal_2_y:
					begin
						if(count == 4)
							begin
								count = 0;
								PS = signal_3;
								timer1 = timer1 - 1;
								timer2 = 60;
								timer3 = 15;
								timer4 = timer4 - 1;
							end
						else
							begin
								count = count + 1;
								PS = signal_2_y;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
					end
				signal_3:
					begin
						if(count == 14)
							begin
								count = 0;
								PS = signal_3_y;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = 5;
								timer4 = timer4 - 1;
							end
						else
							begin
								count = count + 1;
								PS = signal_3;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
					end
				signal_3_y:
					begin
						if(count == 4)
							begin
								count = 0;
								PS = signal_4;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = 60;
								timer4 = 15;
							end
						else
							begin
								count = count + 1;
								PS = signal_3_y;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
					end
				signal_4:
					begin
						if(count == 14)
							begin
								count = 0;
								PS = signal_4_y;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = 5;
							end
						else
							begin
								count = count + 1;
								PS = signal_4;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
					end
				signal_4_y:
					begin
						if(count == 4)
							begin
								count = 0;
								PS = signal_1;
								timer1 = 15;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = 60;
							end
						else
							begin
								count = count + 1;
								PS = signal_4_y;
								timer1 = timer1 - 1;
								timer2 = timer2 - 1;
								timer3 = timer3 - 1;
								timer4 = timer4 - 1;
							end
					end
				endcase
			end
		end
		
		always @(PS)
			begin
				case(PS)
					signal_1:
						begin
							signal_1_lights = 3'b001;
							signal_2_lights = 3'b100;
							signal_3_lights = 3'b100;
							signal_4_lights = 3'b100;
						end
					
					signal_1_y:
						begin
							signal_1_lights = 3'b010;
							signal_2_lights = 3'b100;
							signal_3_lights = 3'b100;
							signal_4_lights = 3'b100;
						end
					
					signal_2:
						begin
							signal_1_lights = 3'b100;
							signal_2_lights = 3'b001;
							signal_3_lights = 3'b100;
							signal_4_lights = 3'b100;
						end
					
					signal_2_y:
						begin
							signal_1_lights = 3'b100;
							signal_2_lights = 3'b010;
							signal_3_lights = 3'b100;
							signal_4_lights = 3'b100;
						end
					
					signal_3:
						begin
							signal_1_lights = 3'b100;
							signal_2_lights = 3'b100;
							signal_3_lights = 3'b001;
							signal_4_lights = 3'b100;
						end
					
					signal_3_y:
						begin
							signal_1_lights = 3'b100;
							signal_2_lights = 3'b100;
							signal_3_lights = 3'b010;
							signal_4_lights = 3'b100;
						end
					
					signal_4:
						begin
							signal_1_lights = 3'b100;
							signal_2_lights = 3'b100;
							signal_3_lights = 3'b100;
							signal_4_lights = 3'b001;
						end
					
					signal_4_y:
						begin
							signal_1_lights = 3'b100;
							signal_2_lights = 3'b100;
							signal_3_lights = 3'b100;
							signal_4_lights = 3'b010;
						end
					endcase
			end
endmodule

module bin_to_bcd(c, d1, d2);
	input[5:0] c;
	output reg[3:0] d1,d2;
	integer i;
	always @(c) begin
		d1 = 4'b0;
		d2 = 4'b0;
		for(i=5;i>=0;i=i-1) begin
			if(d1 >= 5)
				d1 = d1 + 3;
			if(d2 >= 5)
				d2 = d2 +3;
			
			d1 = d1 << 1;
			d1[0] = d2[3];
			d2 = d2 << 1;
			d2[0] = c[i];
		end
	end
endmodule

module segment_display(X,dis);

input [3:0]X;
output wire[6:0] dis;
assign dis[6] = X[3] | X[1] | (X[2]&X[0]) | ((~X[2])&(~X[0]));
assign dis[5] = ~X[2] | ((~X[1])&(~X[0])) | (X[1]&X[0]);
assign dis[4] = X[2] | ~X[1] | X[0];
assign dis[3] = ((~X[2])&(~X[0])) | (X[1]&(~X[0])) | (X[2]&(~X[1])&X[0]) | ((~X[2])&X[1]) | X[3];
assign dis[2] = ((~X[2])&(~X[0])) | (X[1]&(~X[0]));
assign dis[1] = X[3] | ((~X[1])&(~X[0])) | (X[2]&(~X[1])) | (X[2]&(~X[0]));
assign dis[0] = X[3] | (X[2]&(~X[1])) | ((~X[2])&X[1]) | (X[1]&(~X[0]));

endmodule

module statetolight(PS,red,yellow,green_s,green_r);
	input[2:0] PS;
	output reg red,yellow,green_s,green_r;
	always @(PS)
	begin
	case (PS)
		3'b100:
			begin
				red = 1;
				yellow = 0;
				green_s = 0;
				green_r = 0;
			end
		3'b010:
			begin
				red = 0;
				yellow = 1;
				green_s = 0;
				green_r = 0;
			end
		3'b001:
			begin
				red = 0;
				yellow = 0;
				green_s = 1;
				green_r = 1;
			end
		endcase
	end
endmodule

//module clock_div(reset, clk, new_clk);
//	input clk, reset;
//	output reg new_clk;
//	reg counter;
//	always @(posedge clk) begin
//		if(reset == 1) begin
//			counter = 0;
//			new_clk = 1;
//		end
//		else if(counter == 25000000)
//			new_clk = ~new_clk;
//		else
//			counter = counter + 1;
//	end
//endmodule

module blinker(reset, clk, green_l1, green_l2, green_l3, green_l4);
	input clk, reset;
	output reg green_l1, green_l2, green_l3, green_l4;
	always @(posedge clk)
		begin
		if(reset == 1) begin
			green_l1 = 1;
			green_l2 = 1;
			green_l3 = 1;
			green_l4 = 1;
		end
		else begin
			green_l1 = ~green_l1;
			green_l2 = ~green_l2;
			green_l3 = ~green_l3;
			green_l4 = ~green_l4;
		end
	end	
endmodule

module test_traffic_control;
	wire [2:0] signal_1_lights, signal_2_lights, signal_3_lights, signal_4_lights;
	wire [5:0] timer1, timer2, timer3, timer4;
	wire [3:0] tens1, ones1, tens2, ones2, tens3, ones3, tens4, ones4;
	wire [6:0] tens1_dis, ones1_dis, tens2_dis, ones2_dis, tens3_dis, ones3_dis, tens4_dis, ones4_dis;
	reg clk;
	//wire new_clk;
	reg reset;
	
	//clock divider.
	//clock_div cd1(reset, clk, new_clk);
	
	//main system
	traffic_control tc_1(signal_1_lights, signal_2_lights, signal_3_lights, signal_4_lights, clk, reset, timer1, timer2, timer3, timer4);
	//displaying the timer
	bin_to_bcd btb_1(timer1, tens1, ones1);
	bin_to_bcd btb_2(timer2, tens2, ones2);
	bin_to_bcd btb_3(timer3, tens3, ones3);
	bin_to_bcd btb_4(timer4, tens4, ones4);
	segment_display sd_tens1(tens1,tens1_dis);
	segment_display sd_ones1(ones1,ones1_dis);
	segment_display sd_tens2(tens2,tens2_dis);
	segment_display sd_ones2(ones2,ones2_dis);
	segment_display sd_tens3(tens3,tens3_dis);
	segment_display sd_ones3(ones3,ones3_dis);
	segment_display sd_tens4(tens4,tens4_dis);
	segment_display sd_ones4(ones4,ones4_dis);
	
	//diplaying the lights
	wire red1, red2, red3, red4, yellow1, yellow2, yellow3, yellow4, green_l1, green_l2, green_l3, green_l4,  green_s1, green_s2, green_s3, green_s4,  green_r1, green_r2, green_r3, green_r4;
	statetolight sl1(signal_1_lights, red1 ,yellow1 ,green_s1 ,green_r1);
	statetolight sl2(signal_2_lights, red2 ,yellow2 ,green_s2 ,green_r2);
	statetolight sl3(signal_3_lights, red3 ,yellow3 ,green_s3 ,green_r3);
	statetolight sl4(signal_4_lights, red4 ,yellow4 ,green_s4 ,green_r4);
	blinker b1(reset, clk, green_l1, green_l2, green_l3, green_l4);
	
	always #10 clk = ~clk;
	initial
		begin
			reset = 1;
			clk = 1;
			#10 reset = 0;
			end
			
endmodule
